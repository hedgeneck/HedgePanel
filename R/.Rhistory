install.packages("rprojroot")
library(rbmfbovespa)
install.packages("rbmfbovespa")
library(XML)
install.packages("XML")
library(tidyverse)
install.packages("tidyverse")
flights
library(nycflights13)
install.packages("nycflights13")
install.packages("nycflights13")
flights
library(nycflights13)
library(tidyverse)
flights
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(nycflights13)
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
library(nycflights13)
library(tidyverse)
install.packages("tidyverse")
library(nycflights13)
library(tidyverse)
library(dplyr)
select(flights, year, month, day)
select(flights, year:day)
rename(flights, tail_num = tailnum)
flights
rename(flights, tail_num = tailnum)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
flights_sml
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
flights_sml
transmute(flights,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
by_day <- group_by(flights, year, month, day)
group_by(flights, year, month, day)
summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))
R.Version()
install.packages("installr")
library(installr)
updateR()
library(RSQLite)
library(bizdays)
cal = bizdays::calendars()
conectar.bdm = function(){
dbConnect(dbDriver("SQLite"), "../HedgePanel/storage.db")
}
desconectar.bdm = function(conn){
dbDisconnect(conn)
}
dias.uteis.desde = function(date){
if(is.na(date)) date = as.Date("2012-08-20")
datas = bizseq(date, Sys.Date()-1, "Brazil/ANBIMA")
datas[datas != date]
}
dates.to.string = function(df){
for(i in 1:ncol(df)){
if(class(df[,i]) == "Date") df[,i] = format(df[,i], "%Y-%m-%d")
}
return(df)
}
conn = conectar.bdm()
getwd()
setwd("C:/Projetos/HedgePanel/R")
conn = conectar.bdm()
library(stringr)
ler.B3.CONTRATOS.DI = function(dt){
stopifnot(is(dt, "Date"), length(dt) == 1)
url = "http://www2.bmf.com.br/pages/portal/bmfbovespa/lumis/lum-ajustes-do-pregao-ptBR.asp"
response = POST(url,
body = list(
dData1 = format(dt,"%d/%m/%y") ),
encode = "form")
page = content(response, "text", encoding = "iso-8859-1")
pattern = paste0(
"<tr>\\s*<td>DI1[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>", # Valor do Ajuste por Contrato
"(?:\\s*<tr>\\s*<td></td>\\s*", #Começa segunda série de TD, sem nada
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>)*" # Valor do Ajuste por Contrato
)
total_exp = str_extract(string = page, pattern = pattern)[[1]]
if(is.na(total_exp)){
stop(paste0("erro ao ler contratos DI para a data ", dt))
}
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
parts = as.vector(str_extract_all(string = total_exp, pattern = pattern)[[1]])
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>([A-Z]\\d{2}[^<])</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>([\\d.,-]*)</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>([\\d.,-]*)</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
matches = str_match_all(string = parts, pattern = pattern)
matriz = matrix(unlist(matches),nrow=length(matches),byrow=T)
dados = data.frame(matriz[,-1], stringsAsFactors = F)
colnames(dados) = c("Vencimento", "PA_Anterior", "PA_Atual", "Variacao", "VAPC")
dados['Data'] = dt
dados$Vencimento = gsub(" ","",dados$Vencimento)
dados$PA_Anterior = gsub("\\.","",dados$PA_Anterior)
dados$PA_Anterior = gsub(",",".",dados$PA_Anterior)
dados$PA_Anterior = as.numeric(dados$PA_Anterior)
dados$PA_Atual = gsub("\\.","",dados$PA_Atual)
dados$PA_Atual = gsub(",",".",dados$PA_Atual)
dados$PA_Atual = as.numeric(dados$PA_Atual)
dados$Variacao = gsub("\\.","",dados$Variacao)
dados$Variacao = gsub(",",".",dados$Variacao)
dados$Variacao = as.numeric(dados$Variacao)
dados$VAPC = gsub("\\.","",dados$VAPC)
dados$VAPC = gsub(",",".",dados$VAPC)
dados$VAPC = as.numeric(dados$VAPC)
return(dados)
}
dt = as.Date("2019-09-09")
dados = ler.B3.CONTRATOS.DI(dt)
library(httr)
dados = ler.B3.CONTRATOS.DI(dt)
sql = "INSERT INTO b3_contratos_di (vencimento, pa_anterior, pa_atual, variacao, vapc, data) VALUES (:Vencimento, :PA_Anterior, :PA_Atual, :Variacao, :VAPC, :Data)"
r = try(dbSendQuery(conn, sql, params=dates.to.string(dados)))
dbDisconnect(conn)
dbClearResult(r)
dbDisconnect(conn)
dados
dados = data.frame(matriz[,-1], stringsAsFactors = F)
dados.insert(0, 'a', 'dt')
url = "http://www2.bmf.com.br/pages/portal/bmfbovespa/lumis/lum-ajustes-do-pregao-ptBR.asp"
response = POST(url,
body = list(
dData1 = "08/09/2019" ),
encode = "form")
page = content(response, "text", encoding = "iso-8859-1")
# esse pattern pega toda a parte da tabela referente a DI
pattern = paste0(
"<tr>\\s*<td>DI1[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>", # Valor do Ajuste por Contrato
"(?:\\s*<tr>\\s*<td></td>\\s*", #Começa segunda série de TD, sem nada
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>)*" # Valor do Ajuste por Contrato
)
# quando não for extrair nenhum grupo usa str_extract() e str_extract_all()
# quando for extrair grupos, melhor usar str_match() e str_match_all()
total_exp = str_extract(string = page, pattern = pattern)[[1]]
# esse padrão serve para dividir cada table row em parte de um vetor
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
parts = as.vector(str_extract_all(string = total_exp, pattern = pattern)[[1]])
# esse padrão serve para extrair os groupings do vetor de table rows
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>([A-Z]\\d{2}[^<])</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>([\\d.,-]*)</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>([\\d.,-]*)</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
matches = str_match_all(string = parts, pattern = pattern)
matriz = matrix(unlist(matches),nrow=length(matches),byrow=T)
dados = data.frame(matriz[,-1], stringsAsFactors = F)
dados
url = "http://www2.bmf.com.br/pages/portal/bmfbovespa/lumis/lum-ajustes-do-pregao-ptBR.asp"
response = POST(url,
body = list(
dData1 = "09/09/2019" ),
encode = "form")
page = content(response, "text", encoding = "iso-8859-1")
# esse pattern pega toda a parte da tabela referente a DI
pattern = paste0(
"<tr>\\s*<td>DI1[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>", # Valor do Ajuste por Contrato
"(?:\\s*<tr>\\s*<td></td>\\s*", #Começa segunda série de TD, sem nada
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>)*" # Valor do Ajuste por Contrato
)
# quando não for extrair nenhum grupo usa str_extract() e str_extract_all()
# quando for extrair grupos, melhor usar str_match() e str_match_all()
total_exp = str_extract(string = page, pattern = pattern)[[1]]
# esse padrão serve para dividir cada table row em parte de um vetor
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
parts = as.vector(str_extract_all(string = total_exp, pattern = pattern)[[1]])
# esse padrão serve para extrair os groupings do vetor de table rows
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>([A-Z]\\d{2}[^<])</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>([\\d.,-]*)</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>([\\d.,-]*)</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
matches = str_match_all(string = parts, pattern = pattern)
matriz = matrix(unlist(matches),nrow=length(matches),byrow=T)
dados = data.frame(matriz[,-1], stringsAsFactors = F)
dados
dados.insert(0, 'a', dt)
dados
library(RSQLite)
library(bizdays)
cal = bizdays::calendars()
conectar.bdm = function(){
dbConnect(dbDriver("SQLite"), "../HedgePanel/storage.db")
}
desconectar.bdm = function(conn){
dbDisconnect(conn)
}
dias.uteis.desde = function(date){
if(is.na(date)) date = as.Date("2012-08-20")
datas = bizseq(date, Sys.Date()-1, "Brazil/ANBIMA")
datas[datas != date]
}
dates.to.string = function(df){
for(i in 1:ncol(df)){
if(class(df[,i]) == "Date") df[,i] = format(df[,i], "%Y-%m-%d")
}
return(df)
}
conn = conectar.bdm()
library(stringr)
library(httr)
ler.B3.CONTRATOS.DI = function(dt){
stopifnot(is(dt, "Date"), length(dt) == 1)
url = "http://www2.bmf.com.br/pages/portal/bmfbovespa/lumis/lum-ajustes-do-pregao-ptBR.asp"
response = POST(url,
body = list(
dData1 = format(dt,"%d/%m/%y") ),
encode = "form")
page = content(response, "text", encoding = "iso-8859-1")
pattern = paste0(
"<tr>\\s*<td>DI1[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>", # Valor do Ajuste por Contrato
"(?:\\s*<tr>\\s*<td></td>\\s*", #Começa segunda série de TD, sem nada
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>)*" # Valor do Ajuste por Contrato
)
total_exp = str_extract(string = page, pattern = pattern)[[1]]
if(is.na(total_exp)){
stop(paste0("erro ao ler contratos DI para a data ", dt))
}
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
parts = as.vector(str_extract_all(string = total_exp, pattern = pattern)[[1]])
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>([A-Z]\\d{2}[^<])</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>([\\d.,-]*)</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>([\\d.,-]*)</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
matches = str_match_all(string = parts, pattern = pattern)
matriz = matrix(unlist(matches),nrow=length(matches),byrow=T)
dados = data.frame(matriz[,-1], stringsAsFactors = F)
colnames(dados) = c("Vencimento", "PA_Anterior", "PA_Atual", "Variacao", "VAPC")
dados['Data'] = dt
dados$Vencimento = gsub(" ","",dados$Vencimento)
dados$PA_Anterior = gsub("\\.","",dados$PA_Anterior)
dados$PA_Anterior = gsub(",",".",dados$PA_Anterior)
dados$PA_Anterior = as.numeric(dados$PA_Anterior)
dados$PA_Atual = gsub("\\.","",dados$PA_Atual)
dados$PA_Atual = gsub(",",".",dados$PA_Atual)
dados$PA_Atual = as.numeric(dados$PA_Atual)
dados$Variacao = gsub("\\.","",dados$Variacao)
dados$Variacao = gsub(",",".",dados$Variacao)
dados$Variacao = as.numeric(dados$Variacao)
dados$VAPC = gsub("\\.","",dados$VAPC)
dados$VAPC = gsub(",",".",dados$VAPC)
dados$VAPC = as.numeric(dados$VAPC)
return(dados)
}
dt
dt
dt = as.Date("2019-09-09")
dt
dados = ler.B3.CONTRATOS.DI(dt)
sql = "INSERT INTO b3_contratos_di (vencimento, pa_anterior, pa_atual, variacao, vapc, data) VALUES (:Vencimento, :PA_Anterior, :PA_Atual, :Variacao, :VAPC, :Data)"
r = try(dbSendQuery(conn, sql, params=dates.to.string(dados)))
carregar.B3.CONTRATOS.DI = function(as.Date("2018-01-05"))
carregar.B3.CONTRATOS.DI(as.Date("2018-01-05"))
library(RSQLite)
library(bizdays)
cal = bizdays::calendars()
conectar.bdm = function(){
dbConnect(dbDriver("SQLite"), "../HedgePanel/storage.db")
}
desconectar.bdm = function(conn){
dbDisconnect(conn)
}
dias.uteis.desde = function(date){
if(is.na(date)) date = as.Date("2012-08-20")
datas = bizseq(date, Sys.Date()-1, "Brazil/ANBIMA")
datas[datas != date]
}
dates.to.string = function(df){
for(i in 1:ncol(df)){
if(class(df[,i]) == "Date") df[,i] = format(df[,i], "%Y-%m-%d")
}
return(df)
}
conn = conectar.bdm()
library(stringr)
library(httr)
ler.B3.CONTRATOS.DI = function(dt){
stopifnot(is(dt, "Date"), length(dt) == 1)
url = "http://www2.bmf.com.br/pages/portal/bmfbovespa/lumis/lum-ajustes-do-pregao-ptBR.asp"
response = POST(url,
body = list(
dData1 = format(dt,"%d/%m/%y") ),
encode = "form")
page = content(response, "text", encoding = "iso-8859-1")
pattern = paste0(
"<tr>\\s*<td>DI1[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>", # Valor do Ajuste por Contrato
"(?:\\s*<tr>\\s*<td></td>\\s*", #Começa segunda série de TD, sem nada
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>)*" # Valor do Ajuste por Contrato
)
total_exp = str_extract(string = page, pattern = pattern)[[1]]
if(is.na(total_exp)){
stop(paste0("erro ao ler contratos DI para a data ", dt))
}
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>[A-Z]\\d{2}[^<]</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>[\\d.,-]*</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>[\\d.,-]*</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>[\\d.,-]*</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>[\\d.,-]*</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
parts = as.vector(str_extract_all(string = total_exp, pattern = pattern)[[1]])
pattern = paste0(
"<tr>\\s*<td>[^<]*</td>\\s*", #primeiro TD com nome do ativo sendo DI
"<td[^>]*>([A-Z]\\d{2}[^<])</td>\\s*", # segundo TD contendo Vencimento
"<td[^>]*>([\\d.,-]*)</td>\\s*", # terceiro TD com Preço de Ajuste Anterior
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quarto TD contendo Preço de Ajuste Atual
"<td[^>]*>([\\d.,-]*)</td>\\s*", # quinto TD contendo Variação
"<td[^>]*>([\\d.,-]*)</td>\\s*</tr>*" # Valor do Ajuste por Contrato
)
matches = str_match_all(string = parts, pattern = pattern)
matriz = matrix(unlist(matches),nrow=length(matches),byrow=T)
dados = data.frame(matriz[,-1], stringsAsFactors = F)
colnames(dados) = c("Vencimento", "PA_Anterior", "PA_Atual", "Variacao", "VAPC")
dados['Data'] = dt
dados$Vencimento = gsub(" ","",dados$Vencimento)
dados$PA_Anterior = gsub("\\.","",dados$PA_Anterior)
dados$PA_Anterior = gsub(",",".",dados$PA_Anterior)
dados$PA_Anterior = as.numeric(dados$PA_Anterior)
dados$PA_Atual = gsub("\\.","",dados$PA_Atual)
dados$PA_Atual = gsub(",",".",dados$PA_Atual)
dados$PA_Atual = as.numeric(dados$PA_Atual)
dados$Variacao = gsub("\\.","",dados$Variacao)
dados$Variacao = gsub(",",".",dados$Variacao)
dados$Variacao = as.numeric(dados$Variacao)
dados$VAPC = gsub("\\.","",dados$VAPC)
dados$VAPC = gsub(",",".",dados$VAPC)
dados$VAPC = as.numeric(dados$VAPC)
return(dados)
}
carregar.B3.CONTRATOS.DI = function(dt){
dados = ler.B3.CONTRATOS.DI(dt)
sql = "INSERT INTO b3_contratos_di (vencimento, pa_anterior, pa_atual, variacao, vapc, data) VALUES (:Vencimento, :PA_Anterior, :PA_Atual, :Variacao, :VAPC, :Data)"
r = try(dbSendQuery(conn, sql, params=dates.to.string(dados)))
if(!is(r, "try-error")){
message("B3_CONTRATOS_DI carregadoS com sucesso para a data ", format(dt, "%Y-%m-%d"))
dbClearResult(r)
} else {
stop("Erro ao carregar B3_CONTRATOS_DI para a data ", format(dt, "%Y-%m-%d"))
}
}
carregar.B3.CONTRATOS.DI(as.Date("2018-01-05"))
dbGetQuery(conn, "SELECT max(data) FROM B3_CONTRATOS_DI")[1,1]
ultima.data.B3.CONTRATOS.DI = function(){
dbGetQuery(conn, "SELECT max(data) FROM B3_CONTRATOS_DI")[1,1]
}
atualizar.B3.CONTRATOS.DI = function(){
message("Atualizando B3 CONTRATOS DI...")
datas = dias.uteis.desde(ultima.data.B3.CONTRATOS.DI())
if(length(datas)==0){
message("Nada a ser feito.")
} else {
for(i in 1:length(datas)){
try(carregar.B3.CONTRATOS.DI(datas[i]))
}
}
}
atualizar.B3.CONTRATOS.DI()
